<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName" default-lazy-init="true">
	<!-- 数据源读写 -->
	<bean id="ubaseOrmDataSourceRW" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	 <!-- 官方文档中没有说加上这一句，但是经测试，不加这一句，事务不会起作用 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 数据源多个读 -->
	<bean id="ubaseOrmDataSourceR" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	<!-- 加载属性文件 -->  
    <bean id="propertyConfigurer"  
        class="com.wxbatis.jdbc.EncryptablePropertyPlaceholderConfigurer">  
        <property name="locations">  
            <list>  
                <value>  
                    classpath*:configs/*.properties  
                </value>  
            </list>  
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>  
    <!--结束  --> 
    
    <!-- 动态数据源 -->  
   <bean id="dynamicDataSource" class="com.wxbatis.impl.datesource.DynamicDataSource">  
       <!-- 通过key-value关联数据源 -->  
       <property name="targetDataSources">  
           <map>  
               <entry value-ref="ubaseOrmDataSourceRW" key="dataSourceKeyRW"></entry>  
               <entry value-ref="ubaseOrmDataSourceR" key="dataSourceKeyR"></entry>
<!--                <entry value-ref="ubaseOrmDataSourceR" key="dataSourceKeyR2"></entry>
               <entry value-ref="ubaseOrmDataSourceR" key="dataSourceKeyR3"></entry>
               <entry value-ref="ubaseOrmDataSourceR" key="dataSourceKeyR4"></entry> -->
               	<!-- 根据键值匹配数据源 -->
           </map>  
       </property>  
       <property name="defaultTargetDataSource" ref="ubaseOrmDataSourceRW" />      
   </bean>  
    
    <!-- 配置mybitasSqlSessionFactoryBean -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:orm/orm-configuration-mysql.xml"></property>
        <!-- <property name="configLocation" value="classpath:orm/orm-configuration-oracle.xml"></property> -->
        <property name="dataSource" ref="dynamicDataSource" />
        <property name="mapperLocations">
	        <list>
	       		<value> classpath*:orm/mapper/**/*Mapper.xml</value>
	       		<value> classpath*:orm/**/*Mapper.xml</value>
	       	</list>
       	</property>
        
    </bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	<!-- -->
	<bean id="myBatisSessionTemplate"
		class="com.wxbatis.impl.template.MyBatisSessionTemplate" lazy-init="false">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
		<property name="transactionManager" ref="transactionManager" />  
		<property name="dialect" value="${jdbc.dialect}" />	
	</bean>
	 
	<!-- 
	<bean id="myBatisSessionBatchTemplate"
		class="cf.db.mybatis.impl.template.MyBatisSessionBatchTemplate" lazy-init="false">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
		<property name="transactionManager" ref="transactionManager" /> 
		<property name="dialect" value="${jdbc.dialect}" />	
	</bean>
	 -->
	 
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
        <constructor-arg ref="sqlSessionFactory" />  
    </bean>  
    <!--
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate" lazy-init="false">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
    --> 
</beans>